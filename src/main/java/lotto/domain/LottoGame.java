package lotto.domain;

import lotto.util.ExceptionUtils;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.*;

public class LottoGame {
    private LottoGenerator lottoGenerator;
    private List<Lotto> lottos;

    public LottoGame(LottoGenerator lottoGenerator) {
        this.lottoGenerator = lottoGenerator;
    }
    
    public List<Lotto> generateLottos(int money) {
        lottos = lottoGenerator.generate(getAutoGeneratedLottoCount(money, 0));
        return lottos;
    }

    public List<Lotto> generateLottos(int money, List<Lotto> customLottos) {
        validateCustomLottos(customLottos);
        lottos = customLottos;
        int autoGeneratedLottoCount = getAutoGeneratedLottoCount(money, customLottos.size());
        if(autoGeneratedLottoCount > 0) {
            lottos.addAll(lottoGenerator.generate(autoGeneratedLottoCount));
        }
        return lottos;
    }
    
    public double calculateProfitRate(LottoWinNumbers winNumbers, int money) {
        return sumPrize(winNumbers) / money * 100;
    }
    
    public Map<LottoWinType, Long> getResults(LottoWinNumbers winNumbers) {
        Map<LottoWinType, Long> winResults = getWinResults(winNumbers);

        Arrays.stream(LottoWinType.values())
                .filter(lottoWinType -> !winResults.containsKey(lottoWinType))
                .forEach(lottoWinType -> winResults.put(lottoWinType, 0l));
        return winResults;
    }
    
    private Map<LottoWinType, Long> getWinResults(LottoWinNumbers winNumbers) {
        return lottos.stream()
                .collect(groupingBy(lotto -> winNumbers.match(lotto), counting()));
    }
    
    private int getAutoGeneratedLottoCount(int money, int customLottosSize) {
        return (money / Lotto.LOTTO_PRICE) - customLottosSize;
    }
    
    private double sumPrize(LottoWinNumbers winNumbers) {
        return lottos.stream()
                .mapToInt(lotto -> winNumbers.match(lotto).getPrize())
                .sum();
    }
    
    private void validateCustomLottos(List<Lotto> customLottos) {
        if(customLottos == null) {
            ExceptionUtils.throwIllegalArgumentException(LottoGame.class, "customLottos 매개변수에 null값은 입력할 수 없습니다.");
        }
    }
}
