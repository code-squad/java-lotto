package lotto.view;

import lotto.domain.Lotto;
import lotto.domain.LottoNumber;
import lotto.domain.LottoWinType;
import lotto.domain.LottoNumbers;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import static java.util.stream.Collectors.*;

public class OutputView {
	private static final String NUMBERS_VIEW_DELIMITER = ", ";
	
	public static void showLottosView(List<Lotto> lottos) {
		Map<Boolean, List<Lotto>> lottoGeneratedTypeMap = lottos.stream()
				.collect(groupingBy(Lotto::isAutoGenerated));
		
		List<Lotto> autoGeneratedLottos = lottoGeneratedTypeMap.get(true);
		List<Lotto> nonAutoGeneratedLottos = lottoGeneratedTypeMap.get(false);
		
		System.out.println("수동으로 " + (nonAutoGeneratedLottos == null ? 0 : nonAutoGeneratedLottos.size())
				+ "장, 자동으로 " + (autoGeneratedLottos == null? 0 : autoGeneratedLottos.size()) + "개를 구매했습니다.");
		lottos.stream()
				.forEach(lotto -> showLottoView(lotto));
	}
	
	public static void showLottoView(Lotto lotto) {
		
		System.out.print("[");
		showLottoNumbersView(lotto.getLottoNumbers());
		System.out.println("]");
	}
	
	public static void showLottoNumbersView(LottoNumbers lottoNumbers) {
		System.out.print(lottoNumbers.stream()
				.map(LottoNumber::toString)
				.collect(joining(NUMBERS_VIEW_DELIMITER)));
	}

	public static void showResultView(Map<LottoWinType, ? extends Number> results) {
		results = new TreeMap<>(results);

		System.out.println("당첨 통계\n---------");

		results.forEach((lottoWinType, count) -> {
			if(!LottoWinType.MISS.equals(lottoWinType)) {
				System.out.println(new StringBuilder().append(lottoWinType.getMatchCount())
						.append("개 일치 (")
						.append(lottoWinType.getPrize())
						.append("원) - ")
						.append(count)
						.append("개"));
			}
		});
	}

	public static void showProfitRateView(double profitRate) {
		System.out.println("총 수익률은 " + String.format("%.2f",profitRate) + "%입니다.");
	}
}
